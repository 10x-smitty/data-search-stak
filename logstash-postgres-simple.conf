input {
  # PostgreSQL JDBC Input - Users Table
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/drivers/postgresql-42.7.1.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://postgres:5432/${POSTGRES_DB}"
    jdbc_user => "${POSTGRES_USER}"
    jdbc_password => "${POSTGRES_PASSWORD}"
    
    # Initialize connection for Apache AGE
    jdbc_default_timezone => "UTC"
    
    # Schedule - run every 1 minute for testing
    schedule => "*/1 * * * *"
    
    # Query users table
    statement => "SELECT id, name, email, created_at, 'users' as table_name FROM public.users ORDER BY id"
    
    # Add metadata
    add_field => { 
      "[@metadata][index]" => "postgres-data"
      "[@metadata][doc_type]" => "user"
      "data_source" => "postgresql"
    }
    
    # Tag for identification
    tags => ["postgresql", "users"]
  }
}

input {
  # Apache AGE Graph Data Input - Simplified
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/drivers/postgresql-42.7.1.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://postgres:5432/${POSTGRES_DB}"
    jdbc_user => "${POSTGRES_USER}"
    jdbc_password => "${POSTGRES_PASSWORD}"
    
    # Schedule - run every 3 minutes for graph data
    schedule => "*/3 * * * *"
    
    # Query using a simpler approach - query the graph tables directly
    statement => "
      SET search_path = ag_catalog, public; 
      SELECT 
        g.name as graph_name,
        'graph_info' as data_type
      FROM ag_graph g;
    "
    
    # Add metadata
    add_field => { 
      "[@metadata][index]" => "postgres-data"
      "[@metadata][doc_type]" => "graph_info"
      "data_source" => "apache_age"
    }
    
    # Tag for identification
    tags => ["postgresql", "apache_age", "graph"]
  }
}

filter {
  # Add common fields
  mutate {
    add_field => { 
      "ingestion_timestamp" => "%{@timestamp}"
      "environment" => "development"
    }
  }
  
  # Convert created_at to proper timestamp for users
  if [created_at] and [table_name] == "users" {
    date {
      match => [ "created_at", "yyyy-MM-dd HH:mm:ss.SSSSSS", "yyyy-MM-dd HH:mm:ss" ]
      target => "created_timestamp"
    }
  }
}

output {
  # Debug output - shows what's being processed
  if [table_name] == "users" {
    stdout { 
      codec => line { 
        format => "USER: %{name} (%{email}) - ID: %{id}" 
      }
    }
  }
  
  if "graph" in [tags] {
    stdout { 
      codec => line { 
        format => "GRAPH: %{graph_name} - %{data_type}" 
      }
    }
  }
  
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["https://es01:9200"]
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PASSWORD}"
    cacert => "certs/ca/ca.crt"
    
    # Dynamic index based on metadata
    index => "%{[@metadata][index]}-%{+YYYY.MM.dd}"
    document_type => "%{[@metadata][doc_type]}"
  }
}
