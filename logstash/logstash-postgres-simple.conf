input {
  # PostgreSQL JDBC Input for Music Rights Data
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/drivers/postgresql-42.7.1.jar"
    jdbc_driver_class => "org.postgresql.Driver"
    jdbc_connection_string => "jdbc:postgresql://postgres:5432/${POSTGRES_DB}?currentSchema=public"
    jdbc_user => "${POSTGRES_USER}"
    jdbc_password => "${POSTGRES_PASSWORD}"
    
    # Schedule - run every 2 minutes
    schedule => "*/2 * * * *"
    
    # Query music rights data
    statement => "
      SELECT 
        sc.id,
        sc.title,
        sc.writers,
        sc.publishers,
        sc.genre,
        sc.iswc,
        'songs_complete' as table_name,
        'postgresql_music_rights' as data_source_table
      FROM songs_complete sc 
      ORDER BY sc.id
    "
    
    # Add metadata
    add_field => { 
      "data_source" => "postgresql"
      "source_system" => "postgresql"
      "vector_strategy" => "huggingface"
      "embed_field" => "searchable_content"
      "document_type" => "postgres_row_reconciliation"
      "reconciliation_ready" => "true"
    }
    
    tags => ["postgresql", "music_rights", "vector_enabled", "reconciliation"]
  }
}

filter {
  # Create searchable content by combining key fields
  mutate {
    add_field => { 
      "searchable_content" => "Title: %{title}. Writers: %{writers}. Publishers: %{publishers}. Genre: %{genre}. ISWC: %{iswc}."
      "normalized_content" => "%{title} %{writers} %{publishers} %{genre}"
      "key_identifiers" => "id: %{id}, iswc: %{iswc}"
      "record_id" => "%{id}"
      "source_table" => "%{table_name}"
    }
  }

  # Clean up searchable content
  mutate {
    gsub => [
      "searchable_content", "\s+", " ",
      "searchable_content", "^\s+|\s+$", "",
      "normalized_content", "\s+", " ",
      "normalized_content", "^\s+|\s+$", ""
    ]
  }

  # Add timestamp
  mutate {
    add_field => { 
      "environment" => "development"
    }
  }
  
  mutate {
    add_field => { "ingestion_timestamp" => "%{@timestamp}" }
  }
}

output {
  elasticsearch {
    index => "reconciliation-postgresql-music-rights-%{+YYYY.MM}"
    hosts => ["https://es01:9200"]
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PASSWORD}"
    cacert => "certs/ca/ca.crt"
    
    pipeline => "vector-embeddings-pipeline"
    document_id => "postgres-music-rights-%{id}"
  }

  # Debug output
  stdout {
    codec => line {
      format => "POSTGRES: %{title} by %{writers} - %{searchable_content}"
    }
  }
}
